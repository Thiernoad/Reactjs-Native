{"version":3,"sources":["components/counter.js","components/Gallery.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","compute","op","sign","state","counter","c","setState","list","Array","fill","className","this","title","onClick","map","v","index","key","width","src","image","alt","React","Component","Gallery","About","setSkill","event","skillValue","target","value","addSkill","preventDefault","skill","id","skills","pop","onDelete","indexOf","listSkills","splice","contact","name","profile","email","onSubmit","type","onChange","placeholder","s","App","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52dcf456.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PropTypes, {array, number} from 'prop-types';\r\n\r\nclass Counter extends React.Component {\r\n    state;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: 1,\r\n            list: [0]\r\n        }\r\n}\r\ncompute=(op)=>{\r\n        let sign=op==='+'?1:-1;\r\n         if(this.state.counter===1 && op==='-') sign=0;\r\n        let c=this.state.counter+sign;\r\n\r\n        this.setState({\r\n            counter:c,\r\n            list:new Array(c).fill(0)\r\n        });\r\n}\r\n    render() {\r\n        return (\r\n            <div className=\"card m-3\">\r\n                <div className=\"card-header\">\r\n                    <strong>\r\n                        {this.props.title?this.props.title:'defaulte page'} : {this.state.counter}\r\n                    </strong>\r\n                    </div>\r\n                <div className=\"ml-auto\">\r\n                    <button onClick={()=>this.compute('+')} className=\"btn btn-primary m-2\">+</button>\r\n                    <button onClick={()=>this.compute('-')} className=\"btn btn-primary m-2\">-</button>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    {\r\n                        this.state.list.map((v,index)=>\r\n                            <span key={index}>\r\n                                {index}\r\n                            <img width={100} src={this.props.image?this.image:'images/lg.png'} alt=\"\"/>\r\n                            </span>\r\n                        )\r\n                    }\r\n\r\n                   </div>\r\n                </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Counter;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Gallery extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Gallery ...</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nGallery.propTypes = {};\r\n\r\nexport default Gallery;\r\n","import React, {Component} from 'react';\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            skillValue: '',\r\n            title: \"Keep you smile\",\r\n            contact: {\r\n                name: \"Thierno Amadou\",\r\n                profile: 'images/lg.png',\r\n                email: \"tha@gmail.com\"\r\n            },\r\n            skills: [\r\n                {id: 1, skill: 'sofware engenering'},\r\n                {id: 2, skill: 'UI Design'},\r\n                {id: 3, skill: 'Machine learning'},\r\n            ]\r\n        }\r\n    }\r\n\r\n    setSkill = (event) => {\r\n        this.setState({\r\n            skillValue: event.target.value\r\n        })\r\n    }\r\n    addSkill = (event) => {\r\n        event.preventDefault();\r\n        let skill = {\r\n            id: [...this.state.skills].pop().id + 1,\r\n            skills: this.state.skillValue\r\n        }\r\n        this.setState({\r\n            skills: [...this.state.skills, skill]\r\n        })\r\n    }\r\n    onDelete = (skill) => {\r\n        let index = this.state.skills.indexOf(skill);\r\n        let listSkills = [...this.state.skills];\r\n        listSkills.splice(index, 1);\r\n        this.setState({\r\n            skills: listSkills\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <strong>\r\n                            <label>\r\n                                {this.state.title}\r\n                            </label></strong>\r\n                    </div>\r\n\r\n                    <div className=\"row p-2\">\r\n                        <div className=\"col col-auto\">\r\n                            <img width={100} src={this.state.contact.profile} alt=\"profile\"/>\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">\r\n                                    {this.state.contact.name}\r\n                                </li>\r\n                                <li className=\"list-group-item\">\r\n                                    {this.state.contact.email}\r\n                                </li>\r\n                            </ul>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card m-2\">\r\n                    <div className=\"card-header\">Skills : {this.state.skillValue}</div>\r\n                    <div className=\"card-body\">\r\n\r\n                        <form onSubmit={this.addSkill}>\r\n                            <div className=\"row mb-2\">\r\n                                <div className=\"col\">\r\n                                    <input type=\"text\" name=\"skill\" value={this.state.skillValue}\r\n                                           onChange={this.setSkill} placeholder=\"New Skill\" className=\"p-1\"/>\r\n                                </div>\r\n                                <div className=\"col col-auto\">\r\n                                    <button className=\"btn btn-primary\" type=\"submit\">Add</button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                        <table className=\"table\">\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Skill</th>\r\n\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                this.state.skills.map((s, index) =>\r\n                                    <tr key={s.id}>\r\n                                        <td>{s.id}</td>\r\n                                        <td>{s.skill}</td>\r\n                                        <td>\r\n                                            <button className=\"btn btn-danger\" onClick={() => this.onDelete(s)}>x\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            </tbody>\r\n\r\n\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport './App.css';\nimport Counter from \"./components/counter\";\nimport {Route,Switch,Link,BrowserRouter as Router} from 'react-router-dom';\nimport Gallery from \"./components/Gallery\";\nimport About from \"./components/About\";\n//import About from \"./components/About\";\nfunction App() {\n  return (\n   <Router>\n       <nav className=\"navbar navbar-expand navbar-brand m-2\">\n           <ul className=\"navbar-nav\">\n               <li>\n                   <Link className=\"nav-link\" to=\"/home\">Home</Link>\n               </li>\n               <li>\n                   <Link className=\"nav-link\" to=\"/counter\">Counter</Link>\n               </li>\n               <li>\n                   <Link className=\"nav-link\" to=\"/about\">About</Link>\n               </li>\n               <li>\n                   <Link className=\"nav-link\" to=\"/gallery\">Gallery</Link>\n               </li>\n           </ul>\n       </nav>\n       <div className=\"container\">\n           <Switch>\n               <Route path=\"/home\" ></Route>\n               <Route path=\"/counter\" component={Counter}></Route>\n               <Route path=\"/about\" component={About}></Route>\n               <Route path=\"/gallery\" component={Gallery}></Route>\n           </Switch>\n       </div>\n   </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}